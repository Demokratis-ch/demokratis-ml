"""Model construction for consultation topic multi-label classification."""

import numpy as np
import pandas as pd
import sklearn.pipeline
from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.multioutput import MultiOutputClassifier
from sklearn.preprocessing import StandardScaler


def create_matrices(df: pd.DataFrame, topic_columns: list[str]) -> tuple[np.ndarray, pd.DataFrame]:
    """Convert a dataframe (the result of preprocessing) into a feature matrix and a target matrix."""
    x = np.hstack(
        [
            np.vstack(df["embedding_consultation_title"]),
            np.vstack(df["embedding_consultation_description"]),
            np.vstack(df["embedding_documents"]),
            np.vstack(df["embedding_organisation_name"]),
        ]
    )
    y = df[topic_columns]
    assert x.shape[0] == y.shape[0]
    return x, y


def create_classifier(random_state: int) -> sklearn.pipeline.Pipeline:
    """Create a classifier pipeline for consultation topic multi-label classification.

    The input to this pipeline is generated by the :func:`create_matrices` function.
    """
    return sklearn.pipeline.make_pipeline(
        StandardScaler(),
        PCA(n_components=400, random_state=random_state),
        MultiOutputClassifier(
            LogisticRegression(max_iter=1000),
        ),
    )


def get_pca_step(pipeline: sklearn.pipeline.Pipeline) -> PCA | None:
    """Get the PCA step from the pipeline generated by :func:`create_classifier`, if present."""
    try:
        return pipeline.named_steps["pca"]
    except (KeyError, AttributeError):
        return None


def get_predicted_label_probabilities(pred_probs_list: list[np.ndarray]) -> np.ndarray:
    """Extract the positive class probabilities from the list of predicted probabilities.

    The argument is expected to be the output of `MultiOutputClassifier.predict_proba`.
    """
    # Extract the positive class probabilities
    positive_probs = [proba[:, 1] for proba in pred_probs_list]
    # Stack into a (n_samples, n_classes) array
    pred_probs = np.column_stack(positive_probs)
    return pred_probs
